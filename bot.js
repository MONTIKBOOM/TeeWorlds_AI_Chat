const teeworlds = require('teeworlds');
const fs = require('fs');
const readline = require('readline');
const colors = require('colors/safe');
const path = require('path');
const os = require('os');
const https = require('https');

const API_KEY = 'YOUR_API_KEY_HERE';
const API_URL = 'https://openrouter.ai/api/v1/chat/completions';

let clients = [];
let totalMessagesSent = 0;
let reconnectAttempts = {};

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Replace fetch with native Node.js https request
async function callApi(message, sender) {
  return new Promise((resolve, reject) => {
    try {
      console.log(colors.yellow(`ü§î –û–±–¥—É–º—ã–≤–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ${colors.bold(sender)}...`));
      
      const postData = JSON.stringify({
        model: 'deepseek/deepseek-chat',
        messages: [
          {
            role: 'system',
            content: '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (–º–∞–∫—Å. 160 —Å–∏–º–≤–æ–ª–æ–≤).'
          },
          {
            role: 'user',
            content: `–û—Ç–≤–µ—Ç—å –Ω–∞ "${message}" –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –º–∞–∫—Å. 160 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞—á–Ω–∏ —Å ${sender}:, –±–µ–∑ —ç–º–æ–¥–∑–∏ –∏ —ç–º–æ—Ü–∏–π`
          }
        ],
        max_tokens: 100
      });
      
      const options = {
        hostname: 'openrouter.ai',
        path: '/api/v1/chat/completions',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${API_KEY}`,
          'Content-Length': Buffer.byteLength(postData)
        }
      };
      
      const req = https.request(options, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
          data += chunk;
        });
        
        res.on('end', () => {
          if (res.statusCode !== 200) {
            reject(new Error(`API Error: Status ${res.statusCode}`));
            return;
          }
          
          try {
            const responseData = JSON.parse(data);
            let reply = responseData.choices[0].message.content.trim();
            reply = reply.replace(/(\r\n|\n|\r)/gm, ' ').trim();
            const finalReply = reply.length > 160 ? reply.slice(0, 157) + '...' : reply;
            
            console.log(colors.green(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç: ${colors.italic(finalReply)}`));
            resolve(finalReply);
          } catch (err) {
            reject(new Error(`Failed to parse API response: ${err.message}`));
          }
        });
      });
      
      req.on('error', (err) => {
        reject(new Error(`API Request failed: ${err.message}`));
      });
      
      req.write(postData);
      req.end();
    } catch (err) {
      reject(err);
    }
  });
}

function shouldProcessMessage(message) {
  if (!message || typeof message !== 'string') return false;
  
  const skipPatterns = [
    'our community', 'joined', 'left', 'entered', 'muted', 
    'not permitted', 'version', 'visit', 'rules', 'welcome',
    'server', 'spectator', 'connecting', 'disconnected'
  ];
  
  const lowercaseMsg = message.toLowerCase();
  
  if (skipPatterns.some(pattern => lowercaseMsg.includes(pattern))) return false;
  if (message.trim().length < 2) return false;
  if (message.startsWith('/') || message.startsWith('!')) return false;
  
  return true;
}

async function generateResponse(message, sender) {
  if (!shouldProcessMessage(message)) {
    console.log(colors.gray(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è: "${message}" –æ—Ç ${sender}`));
    return null;
  }

  try {
    return await callApi(message, sender);
  } catch (err) {
    console.error(colors.red(`‚ùå –û—à–∏–±–∫–∞ API: ${err.message}`));
    return `${sender}: –Ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ –ª–∏–º–∏—Ç—É –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`;
  }
}

function parseDDNetAddress(address) {
  const cleanAddress = address.replace(/tw-0\.[6-7]\+udp:\/\//, '');
  
  const ipv6Match = cleanAddress.match(/^\[(.*?)\]:(\d+)$/);
  if (ipv6Match) {
    const host = ipv6Match[1];
    const port = parseInt(ipv6Match[2]);
    if (isNaN(port) || port <= 0 || port >= 65536) return null;
    return { host, port };
  }

  const parts = cleanAddress.split(':');
  if (parts.length === 2) {
    const host = parts[0];
    const port = parseInt(parts[1]);
    if (isNaN(port) || port <= 0 || port >= 65536) return null;
    return { host, port };
  }

  return null;
}

async function broadcastToAllServers(message) {
  console.log(colors.cyan(`üì£ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º —Å–µ—Ä–≤–µ—Ä–∞–º: ${colors.italic(message)}`));
  
  for (const client of clients) {
    try {
      await client.game.Say(message);
      totalMessagesSent++;
      await new Promise(resolve => setTimeout(resolve, 500));
    } catch (err) {
      console.error(colors.red(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ${err.message}`));
    }
  }
}

function formatUptime(seconds) {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = Math.floor(seconds % 60);
  return `${hours}—á ${minutes}–º ${secs}—Å`;
}

function displayStats() {
  console.log(colors.cyan('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'));
  console.log(colors.cyan('‚ïë           –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê             ‚ïë'));
  console.log(colors.cyan('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù'));
  console.log(colors.green('–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã: ') + colors.white(clients.filter(c => c.connected).length + '/' + clients.length));
  console.log(colors.green('–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ') + colors.white(totalMessagesSent));
  console.log(colors.green('–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ') + colors.white(formatUptime(process.uptime())));
  console.log(colors.green('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ') + colors.white((process.memoryUsage().rss / 1024 / 1024).toFixed(2) + ' –ú–ë'));
}

async function startBot() {
  let settings;
  try {
    settings = JSON.parse(fs.readFileSync('settings.bot', 'utf8'));
  } catch (err) {
    console.error(colors.red(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${err.message}`));
    console.log(colors.yellow('‚ö†Ô∏è –°–æ–∑–¥–∞—é —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...'));
    settings = {
      name: "TeeAI",
      clan: "[BOT]",
      reconnectAttempts: 3,
      responseDelay: 3000,
      messageDelay: 500
    };
    fs.writeFileSync('settings.bot', JSON.stringify(settings, null, 2));
  }
  
  let servers;

  console.log(colors.cyan('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'));
  console.log(colors.cyan('‚ïë         TEEWORLDS AI –ß–ê–¢-–ë–û–¢          ‚ïë'));
  console.log(colors.cyan('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù'));
  console.log(colors.magenta(`–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ ${os.platform()} | Node.js ${process.version}`));
  console.log(colors.cyan('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:'));
  console.log(colors.green('/broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ]') + colors.white(' - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —Å–µ—Ä–≤–µ—Ä–∞–º'));
  console.log(colors.green('/stats') + colors.white(' - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞'));
  console.log(colors.green('/exit') + colors.white(' - –í—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞'));
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ IP –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
  try {
    console.log(colors.blue('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ IPs –∏–∑ —Ñ–∞–π–ª–∞ ips.bot...'));
    if (!fs.existsSync('ips.bot')) {
      console.log(colors.yellow('‚ö†Ô∏è –§–∞–π–ª ips.bot –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –ø—Ä–∏–º–µ—Ä...'));
      fs.writeFileSync('ips.bot', '127.0.0.1:8303\nexample.com:8303');
    }
    
    servers = fs.readFileSync('ips.bot', 'utf8')
      .split('\n')
      .filter(ip => ip.trim())
      .map(ip => {
        const [host, port = '8303'] = ip.split(':');
        const parsedPort = parseInt(port);
        if (isNaN(parsedPort) || parsedPort <= 0 || parsedPort >= 65536) return null;
        return { host, port: parsedPort };
      })
      .filter(result => result !== null);
  } catch (err) {
    console.error(colors.red(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ IPs: ${err.message}`));
    process.exit(1);
  }

  if (servers.length === 0) {
    console.error(colors.red('‚ùå –í–∞–ª–∏–¥–Ω—ã–µ IPs –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã—Ö–æ–¥...'));
    process.exit(1);
  }

  console.log(colors.green(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${servers.length} —Å–µ—Ä–≤–µ—Ä–∞–º –∫–∞–∫ "${settings.name}"`));
  console.log(colors.magenta('üí¨ –í–≤–æ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ:'));

  clients = [];
  servers.forEach(({ host, port }) => {
    const client = new teeworlds.Client(host, port, settings.name, settings.clan);
    client.serverAddress = `${host}:${port}`;
    clients.push(client);

    client.connect();

    client.on('connected', () => {
      console.log(colors.green(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ ${colors.bold(`${host}:${port}`)}!`));
      client.game.Say("–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è.");
      reconnectAttempts[`${host}:${port}`] = 0;
    });

    client.on('message', async (message) => {
      const sender = message.author?.ClientInfo?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
      const msgText = message.message || '';

      const match = msgText.match(/^([^:]+):\s*(.+)$/);
      if (!match) return;

      const targetName = match[1].trim();
      const actualMessage = match[2].trim();

      if (sender === settings.name) return;

      if (message.team === 0 || message.team === 1) {
        const teamType = message.team === 0 ? colors.white('‚ô®Ô∏è  –í—Å–µ') : colors.yellow('üîí –ö–æ–º–∞–Ω–¥–∞');
        console.log(`${teamType} ${colors.cyan(`[${host}:${port}]`)} ${colors.magenta(sender)}: ${colors.white(actualMessage)}`);
      }

      if (msgText.toLowerCase().includes('joined') && sender.toLowerCase() === 'strew') {
        await client.game.Say('–ø—Ä–∏–≤–µ—Ç, strew!');
        console.log(colors.green(`üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª strew –Ω–∞ ${host}:${port}!`));
        return;
      }

      const reply = await generateResponse(actualMessage, sender);
      if (reply) {
        console.log(colors.blue(`üîÑ –ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç –¥–ª—è ${colors.bold(sender)}...`));
        
        await new Promise(resolve => setTimeout(resolve, settings.responseDelay || 3000));
        
        const finalMessage = reply.replace(/(\r\n|\n|\r)/gm, ' ').trim();
        console.log(colors.green(`üí¨ –û—Ç–ø—Ä–∞–≤–ª—è—é: ${colors.italic(finalMessage)}`));
        await client.game.Say(finalMessage);
        totalMessagesSent++;
      }
    });

    client.on('disconnect', (reason) => {
      console.log(colors.red(`‚ùå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç ${host}:${port}: ${reason}`));
      const key = `${host}:${port}`;
      reconnectAttempts[key] = (reconnectAttempts[key] || 0) + 1;
      
      if (reconnectAttempts[key] <= settings.reconnectAttempts) {
        console.log(colors.yellow(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${reconnectAttempts[key]}/${settings.reconnectAttempts})...`));
        setTimeout(() => {
          console.log(colors.blue(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${host}:${port}...`));
          client.connect();
        }, 5000 * reconnectAttempts[key]);
      }
    });

    client.on('error', (error) => {
      console.error(colors.red(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ ${host}:${port}: ${error.message}`));
    });
  });

  let lastSaveTime = Date.now();
  const LOG_INTERVAL = 300000;
  
  function logActivity() {
    const now = Date.now();
    if (now - lastSaveTime >= LOG_INTERVAL) {
      const timestamp = new Date().toISOString();
      const logMessage = `[${timestamp}] –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã: ${clients.filter(c => c.connected).length}/${clients.length}, –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${totalMessagesSent}\n`;
      
      fs.appendFileSync('activity.log', logMessage);
      console.log(colors.gray(`üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Ñ–∞–π–ª`));
      
      lastSaveTime = now;
    }
  }
  
  setInterval(logActivity, 60000);

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–æ–Ω—Å–æ–ª–∏
  rl.on('line', async (input) => {
    const trimmedInput = input.trim();
    if (trimmedInput === '') return;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (trimmedInput.startsWith('/')) {
      const parts = trimmedInput.slice(1).split(' ');
      const command = parts[0].toLowerCase();
      const args = parts.slice(1).join(' ');
      
      switch (command) {
        case 'broadcast':
        case 'bc':
          if (!args) {console.log(colors.yellow('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ /broadcast'));
            break;
          }
          await broadcastToAllServers(args);
          break;
          
        case 'stats':
          displayStats();
          break;
          
        case 'exit':
        case 'quit':
          console.log(colors.yellow('üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...'));
          try {
            await Promise.all(clients.map(client => {
              if (client.connected) {
                return client.game.Say('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!')
                  .then(() => client.Disconnect());
              }
              return Promise.resolve();
            }));
          } catch (err) {
            console.error(colors.red(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: ${err.message}`));
          }
          console.log(colors.green('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤'));
          process.exit(0);
          break;
          
        default:
          console.log(colors.yellow(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`));
          console.log(colors.yellow('–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã /broadcast, /stats –∏ /exit'));
      }
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
      await broadcastToAllServers(trimmedInput);
    }
  });

  process.on('SIGINT', async () => {
    console.log(colors.yellow('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...'));
    rl.close();
    
    try {
      await Promise.all(clients.map(client => {
        if (client.connected) {
          return client.game.Say('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!')
            .then(() => client.Disconnect());
        }
        return Promise.resolve();
      }));
    } catch (err) {
      console.error(colors.red(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: ${err.message}`));
    }
    
    console.log(colors.green('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤'));
    process.exit(0);
  });
  
  process.on('uncaughtException', (err) => {
    console.error(colors.red(`‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err.message}`));
    console.error(err.stack);
    
    fs.appendFileSync('error.log', `[${new Date().toISOString()}] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err.message}\n${err.stack}\n\n`);
    console.log(colors.yellow('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ error.log'));
  });
  
  console.log(colors.green('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!'));
}

startBot().catch(err => {
  console.error(colors.red(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ${err.message}`));
  fs.appendFileSync('error.log', `[${new Date().toISOString()}] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${err.message}\n${err.stack}\n\n`);
  process.exit(1);
});
